(function(root,factory){if(typeof define==="function"&&define.amd){define([],factory)}else if(typeof exports==="object"){module.exports=factory()}else{root.returnExports=factory()}})(this,function(){"use strict";var forEach=function(target,callback){Array.prototype.forEach.call(target,callback)};var warning=function(display,message){console.warn(message)};var has=function(target,prop){return Object.prototype.hasOwnProperty.call(target,prop)};var trim=function(target){return String.prototype.trim.call(target)};var warn=function warn(message){warning(false,message)};var replace=String.prototype.replace;var split=String.prototype.split;var delimiter="||||";var russianPluralGroups=function(n){var lastTwo=n%100;var end=lastTwo%10;if(lastTwo!==11&&end===1){return 0}if(2<=end&&end<=4&&!(lastTwo>=12&&lastTwo<=14)){return 1}return 2};var pluralTypes={arabic:function(n){if(n<3){return n}var lastTwo=n%100;if(lastTwo>=3&&lastTwo<=10)return 3;return lastTwo>=11?4:5},bosnian_serbian:russianPluralGroups,chinese:function(){return 0},croatian:russianPluralGroups,french:function(n){return n>1?1:0},german:function(n){return n!==1?1:0},russian:russianPluralGroups,lithuanian:function(n){if(n%10===1&&n%100!==11){return 0}return n%10>=2&&n%10<=9&&(n%100<11||n%100>19)?1:2},czech:function(n){if(n===1){return 0}return n>=2&&n<=4?1:2},polish:function(n){if(n===1){return 0}var end=n%10;return 2<=end&&end<=4&&(n%100<10||n%100>=20)?1:2},icelandic:function(n){return n%10!==1||n%100===11?1:0},slovenian:function(n){var lastTwo=n%100;if(lastTwo===1){return 0}if(lastTwo===2){return 1}if(lastTwo===3||lastTwo===4){return 2}return 3}};var pluralTypeToLanguages={arabic:["ar"],bosnian_serbian:["bs-Latn-BA","bs-Cyrl-BA","srl-RS","sr-RS"],chinese:["id","id-ID","ja","ko","ko-KR","lo","ms","th","th-TH","zh"],croatian:["hr","hr-HR"],german:["fa","da","de","en","es","fi","el","he","hi-IN","hu","hu-HU","it","nl","no","pt","sv","tr"],french:["fr","tl","pt-br"],russian:["ru","ru-RU"],lithuanian:["lt"],czech:["cs","cs-CZ","sk"],polish:["pl"],icelandic:["is"],slovenian:["sl-SL"]};function langToTypeMap(mapping){var ret={};forEach(mapping,function(langs,type){forEach(langs,function(lang){ret[lang]=type})});return ret}function pluralTypeName(locale){var langToPluralType=langToTypeMap(pluralTypeToLanguages);return langToPluralType[locale]||langToPluralType[split.call(locale,/-/,1)[0]]||langToPluralType.en}function pluralTypeIndex(locale,count){return pluralTypes[pluralTypeName(locale)](count)}function escape(token){return token.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function constructTokenRegex(opts){var prefix=opts&&opts.prefix||"%{";var suffix=opts&&opts.suffix||"}";if(prefix===delimiter||suffix===delimiter){throw new RangeError('"'+delimiter+'" token is reserved for pluralization')}return new RegExp(escape(prefix)+"(.*?)"+escape(suffix),"g")}var dollarRegex=/\$/g;var dollarBillsYall="$$";var defaultTokenRegex=/%\{(.*?)\}/g;function transformPhrase(phrase,substitutions,locale,tokenRegex){if(typeof phrase!=="string"){throw new TypeError("Polyglot.transformPhrase expects argument #1 to be string")}if(substitutions==null){return phrase}var result=phrase;var interpolationRegex=tokenRegex||defaultTokenRegex;var options=typeof substitutions==="number"?{smart_count:substitutions}:substitutions;if(options.smart_count!=null&&result){var texts=split.call(result,delimiter);result=trim(texts[pluralTypeIndex(locale||"en",options.smart_count)]||texts[0])}result=replace.call(result,interpolationRegex,function(expression,argument){if(!has(options,argument)||options[argument]==null){return expression}return replace.call(options[argument],dollarRegex,dollarBillsYall)});return result}function Polyglot(options){var opts=options||{};this.phrases={};this.extend(opts.phrases||{});this.currentLocale=opts.locale||"en";var allowMissing=opts.allowMissing?transformPhrase:null;this.onMissingKey=typeof opts.onMissingKey==="function"?opts.onMissingKey:allowMissing;this.warn=opts.warn||warn;this.tokenRegex=constructTokenRegex(opts.interpolation)}Polyglot.prototype.locale=function(newLocale){if(newLocale)this.currentLocale=newLocale;return this.currentLocale};Polyglot.prototype.extend=function(morePhrases,prefix){forEach(morePhrases,function(phrase,key){var prefixedKey=prefix?prefix+"."+key:key;if(typeof phrase==="object"){this.extend(phrase,prefixedKey)}else{this.phrases[prefixedKey]=phrase}},this)};Polyglot.prototype.unset=function(morePhrases,prefix){if(typeof morePhrases==="string"){delete this.phrases[morePhrases]}else{forEach(morePhrases,function(phrase,key){var prefixedKey=prefix?prefix+"."+key:key;if(typeof phrase==="object"){this.unset(phrase,prefixedKey)}else{delete this.phrases[prefixedKey]}},this)}};Polyglot.prototype.clear=function(){this.phrases={}};Polyglot.prototype.replace=function(newPhrases){this.clear();this.extend(newPhrases)};Polyglot.prototype.t=function(key,options){var phrase,result;var opts=options==null?{}:options;if(typeof this.phrases[key]==="string"){phrase=this.phrases[key]}else if(typeof opts._==="string"){phrase=opts._}else if(this.onMissingKey){var onMissingKey=this.onMissingKey;result=onMissingKey(key,opts,this.currentLocale,this.tokenRegex)}else{this.warn('Missing translation for key: "'+key+'"');result=key}if(typeof phrase==="string"){result=transformPhrase(phrase,opts,this.currentLocale,this.tokenRegex)}return result};Polyglot.prototype.has=function(key){return has(this.phrases,key)};Polyglot.transformPhrase=function transform(phrase,substitutions,locale){return transformPhrase(phrase,substitutions,locale)};return Polyglot});